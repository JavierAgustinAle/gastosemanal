{"version":3,"sources":["components/Header.jsx","components/Formulario.jsx","components/Gasto.jsx","components/Listado.jsx","components/Presupuesto.jsx","helper/helper.js","components/Restante.jsx","components/ControlPresupuesto.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","props","titulo","Formulario","nombreGasto","React","createRef","totalGasto","crearGasto","e","preventDefault","gasto","current","value","agregarGasto","currentTarget","reset","onSubmit","this","className","type","placeholder","ref","Component","Gasto","Listado","Object","keys","gastos","map","key","propType","PropTypes","object","isRequired","Presupuesto","presupuesto","revisarPresupuesto","restante","Restante","alert","string","ControlPresupuesto","App","state","Date","now","restarPresupuesto","setState","cantidad","restar","Number","String","obtenerPresupuesto","prompt","totalPresupuesto","parseInt","validarPresupuesto","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c4baec3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header>\r\n            <h1>{props.titulo}</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    // refs para campos del form\r\n    nombreGasto = React.createRef();\r\n    totalGasto = React.createRef();\r\n\r\n    crearGasto = e => {\r\n        e.preventDefault();\r\n\r\n        const gasto = {\r\n            nombreGasto: this.nombreGasto.current.value,\r\n            totalGasto: this.totalGasto.current.value\r\n        }\r\n\r\n        this.props.agregarGasto(gasto);\r\n\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.crearGasto}>\r\n                <h2>Agrega tus gastos aqui</h2>\r\n                <div className=\"campo\">\r\n                    <label>Nombre Gasto</label>\r\n                    <input className=\"u-full-width\" type=\"text\" placeholder=\"Ej. Transporte\" ref={this.nombreGasto} />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Cantidad</label>\r\n                    <input className=\"u-full-width\" type=\"number\" placeholder=\"Ej. 300\" ref={this.totalGasto} />\r\n                </div>\r\n\r\n                <input className=\"button-primary u-full-width\" type=\"submit\" value=\"Agregar\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n// Indicamos que tipo de props se debe recibir\r\nFormulario.propTypes = {\r\n    agregarGasto: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Gasto = (props) => {\r\n    return (\r\n        <li className=\"gastos\">\r\n            <p>\r\n                {props.gasto.nombreGasto}\r\n                <span className=\"gasto\">\r\n                    $ {props.gasto.totalGasto}\r\n                </span>\r\n            </p>\r\n        </li>\r\n    )\r\n}\r\n\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Gasto;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport Gasto from './Gasto';\r\n\r\nclass Listado extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"gastos-realizados\">\r\n                <h2>Listado</h2>\r\n                {\r\n                    Object.keys(this.props.gastos).map(key => (\r\n                        <Gasto\r\n                            gasto={this.props.gastos[key]}\r\n                            key={key}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nListado.propType = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\nexport default Listado;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Presupuesto = (props) => {\r\n    return (\r\n        <div className=\"alert alert-primary\">\r\n            Presupuesto: $ {props.presupuesto}\r\n        </div>\r\n    )\r\n}\r\n\r\nPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Presupuesto;","\r\n\r\nexport const validarPresupuesto = presupuesto => {\r\n    let totalPresupuesto = parseInt(presupuesto, 10) || 0;\r\n\r\n    if (totalPresupuesto > 0) {\r\n        return totalPresupuesto;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const revisarPresupuesto = (presupuesto, restante) => {\r\n    let clase;\r\n    // Comprobar el 25% \r\n    if ((presupuesto / 4) > restante) {\r\n        clase = 'alert alert-danger';\r\n    } else if ((presupuesto / 2) > restante) {\r\n        clase = 'alert alert-warning'\r\n    } else {\r\n        clase = 'alert alert alert-success';\r\n    }\r\n    return clase;\r\n} ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Helper\r\nimport { revisarPresupuesto } from '../helper/helper';\r\n\r\nconst Restante = (props) => {\r\n    const presupuesto = props.presupuesto;\r\n    const restante = props.restante;\r\n    if (restante < 0) {\r\n        alert('Ya ha gastado el total del presupuesto!')\r\n    }\r\n    return (\r\n        <div className={revisarPresupuesto(presupuesto, restante)}>\r\n            Restante: $ {props.restante}\r\n        </div>\r\n    )\r\n}\r\n\r\nRestante.propType = {\r\n    presupuesto: PropTypes.string.isRequired,\r\n    restante: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Restante;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport Presupuesto from './Presupuesto';\r\nimport Restante from './Restante';\r\n\r\nclass ControlPresupuesto extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Presupuesto\r\n                    presupuesto={this.props.presupuesto}\r\n                />\r\n                <Restante\r\n                    restante={this.props.restante}\r\n                    presupuesto={this.props.presupuesto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.string.isRequired,\r\n    restante: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ControlPresupuesto;","import React, { Component } from 'react';\r\nimport '../css/App.css';\r\n\r\n// Components\r\nimport Header from './Header';\r\nimport Formulario from './Formulario';\r\nimport Listado from './Listado';\r\nimport ControlPresupuesto from './ControlPresupuesto';\r\n\r\n// Helper\r\nimport { validarPresupuesto } from '../helper/helper'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    presupuesto: '',\r\n    gastos: {},\r\n    restante: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.obtenerPresupuesto();\r\n  }\r\n\r\n  obtenerPresupuesto() {\r\n    let presupuesto = prompt('Cual es tu presupuesto?');\r\n\r\n    let resultado = validarPresupuesto(presupuesto)\r\n    if (resultado) {\r\n      this.setState({\r\n        presupuesto: presupuesto,\r\n        restante: presupuesto\r\n      })\r\n    }\r\n  }\r\n\r\n  //Agregar gasto al state\r\n  agregarGasto = gasto => {\r\n    const gastos = { ...this.state.gastos }\r\n\r\n    gastos[`gastos${Date.now()}`] = gasto;\r\n\r\n    this.restarPresupuesto(gasto.totalGasto);\r\n\r\n    this.setState({\r\n      gastos\r\n    })\r\n  }\r\n\r\n\r\n\r\n  restarPresupuesto = cantidad => {\r\n    let restar = Number(cantidad);\r\n    let restante = this.state.restante;\r\n\r\n    restante -= restar;\r\n\r\n    restante = String(restante);\r\n    this.setState({\r\n      restante: restante\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"App container\">\r\n          <Header\r\n            titulo='Gasto Semanal'\r\n          />\r\n          <div className=\"contenido-principal contenido\">\r\n            <div className=\"row\">\r\n              <div className=\"one-half column\">\r\n                <Formulario\r\n                  agregarGasto={this.agregarGasto}\r\n                />\r\n              </div>\r\n              <div className=\"one-half column\">\r\n                <Listado\r\n                  gastos={this.state.gastos}\r\n                />\r\n                <ControlPresupuesto\r\n                  presupuesto={this.state.presupuesto}\r\n                  restante={this.state.restante}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}